{
	"name": "csv_transformations_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "csv_adf_ds",
						"type": "DatasetReference"
					},
					"name": "csvtransformation"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "outputcontainerds",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "filteroutdates"
				},
				{
					"name": "yearofdate"
				},
				{
					"name": "sortwithpassengers"
				},
				{
					"name": "select1"
				},
				{
					"name": "pivot1"
				},
				{
					"name": "unpivot1"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          year as date,",
				"          month as string,",
				"          passengers as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> csvtransformation",
				"csvtransformation filter(year(year)<1950) ~> filteroutdates",
				"filteroutdates derive(yearOnly = year(year)) ~> yearofdate",
				"yearofdate sort(asc(passengers, true)) ~> sortwithpassengers",
				"sortwithpassengers select(mapColumn(",
				"          month,",
				"          year,",
				"          passengers,",
				"          yearOnly",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 pivot(groupBy(year),",
				"     pivotBy(month),",
				"     passengers = sum(passengers),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivot1",
				"pivot1 unpivot(output(",
				"          Month as string,",
				"          passengers as long",
				"     ),",
				"     ungroupBy(year),",
				"     lateral: false,",
				"     ignoreNullPivots: false) ~> unpivot1",
				"sortwithpassengers keyGenerate(output(rank as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"filteroutdates sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['fiteredbefore.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> outputcontainerds"
			]
		}
	}
}